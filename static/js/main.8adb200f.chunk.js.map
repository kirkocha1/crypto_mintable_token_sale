{"version":3,"sources":["getWeb3.js","MintableApp.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","console","log","web3","Web3","enable","provider","providers","HttpProvider","MintableApp","state","loaded","kycAddress","tokenSaleAddress","tokenAddress","userTokens","supply","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","udemyFinalCourseToken","Contract","UdemyFinalCourseToken","abi","networks","address","udemyFinalCourseSale","UdemyFinalCourseTokenSale","mintableKycContract","MintableKycContract","listenToTokenTransfer","methods","weiRaised","call","setState","_address","updateUserTokens","alert","error","handleInputChange","event","target","value","type","checked","name","handleKycSubmit","setKycCompleted","send","from","handleBuyToken","buyTokens","balanceOf","events","Transfer","to","on","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8adb200f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n    new Promise((resolve, reject) => {\n        // Wait for loading completion to avoid race conditions with web3 injection timing.\n        window.addEventListener(\"load\", async() => {\n            // Modern dapp browsers...\n            if (window.ethereum) {\n                console.log(\"Modern dapp browser\");\n                const web3 = new Web3(window.ethereum);\n                try {\n                    // Request account access if needed\n                    await window.ethereum.enable();\n                    // Accounts now exposed\n                    resolve(web3);\n                } catch (error) {\n                    reject(error);\n                }\n            }\n            // Legacy dapp browsers...\n            else if (window.web3) {\n                console.log(\"legacy browser\");\n                // Use Mist/MetaMask's provider.\n                const web3 = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n            }\n            // Fallback to localhost; use dev console port by default...\n            else {\n                console.log(\"browser doesn't have plugin/build-in dapps support, build Web3 with default local env\");\n                const provider = new Web3.providers.HttpProvider(\n                    \"http://127.0.0.1:9545\"\n                );\n                const web3 = new Web3(provider);\n                console.log(\"No web3 instance injected, using Local web3.\");\n                resolve(web3);\n            }\n        });\n    });\n\nexport default getWeb3;","import React, { Component } from \"react\";\nimport UdemyFinalCourseToken from \"./contracts/UdemyFinalCourseToken.json\";\nimport UdemyFinalCourseTokenSale from \"./contracts/UdemyFinalCourseTokenSale.json\";\nimport MintableKycContract from \"./contracts/MintableKycContract.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass MintableApp extends Component {\n\n  state = { loaded: false, kycAddress: \"0x123\", tokenSaleAddress: \"\", tokenAddress: \"\", userTokens: 0, supply: 0 };\n\n  componentDidMount = async() => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n      console.log(`client accounts: ${this.accounts}`)\n      // Get the contract instance.\n      //this.networkId = await this.web3.eth.net.getId(); <<- this doesn't work with MetaMask anymore\n      //this network_id is hardcoded because chainId and networkId are not the same concept. If you compile contract with network id that differes from chainid\n      // you should use metwork id from truffle-config.js for your development \n      this.networkId = await this.web3.eth.net.getId()\n      console.log(this.networkId)\n      this.udemyFinalCourseToken = new this.web3.eth.Contract(\n        UdemyFinalCourseToken.abi,\n        UdemyFinalCourseToken.networks[this.networkId] && UdemyFinalCourseToken.networks[this.networkId].address,\n      );\n\n      this.udemyFinalCourseSale = new this.web3.eth.Contract(\n        UdemyFinalCourseTokenSale.abi,\n        UdemyFinalCourseTokenSale.networks[this.networkId] && UdemyFinalCourseTokenSale.networks[this.networkId].address,\n      );\n      this.mintableKycContract = new this.web3.eth.Contract(\n        MintableKycContract.abi,\n        MintableKycContract.networks[this.networkId] && MintableKycContract.networks[this.networkId].address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.listenToTokenTransfer();\n      let supply = await this.udemyFinalCourseSale.methods.weiRaised().call()\n      this.setState({ loaded:true, tokenSaleAddress: this.udemyFinalCourseSale._address, tokenAddress: this.udemyFinalCourseToken._address, supply: supply }, this.updateUserTokens);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert( `Failed to load web3, accounts, or contract. Check console for details.`);\n        console.error(error);\n    }\n  }\n    \n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({[name]: value });\n  }\n\n  handleKycSubmit = async () => {\n    const {kycAddress} = this.state;\n    console.log(`from account ${this.accounts[0]}`)\n    await this.mintableKycContract.methods.setKycCompleted(kycAddress).send({from: this.accounts[0]});\n    alert(\"Account \"+kycAddress+\" is now whitelisted\");\n  }\n\n  handleBuyToken = async () => {\n    await this.udemyFinalCourseSale.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0], value: 1});\n  }\n\n  updateUserTokens = async() => {\n    let supply = await this.udemyFinalCourseSale.methods.weiRaised().call()\n    let userTokens = await this.udemyFinalCourseToken.methods.balanceOf(this.accounts[0]).call();\n    this.setState({userTokens: userTokens, supply: supply});\n  }\n\n  listenToTokenTransfer = async() => {\n    this.udemyFinalCourseToken.events.Transfer({to: this.accounts[0]}).on(\"data\", this.updateUserTokens);\n  }\n   \n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">    \n        <h1>Udemy Final Course Mintable Contract</h1>\n        <h2>Enable your account</h2>\n          Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\n        <button type=\"button\" onClick={this.handleKycSubmit}>Add Address to Whitelist</button>\n        <h2>Buy UFCM tokens</h2>\n        <p>Send Ether to this address: {this.state.tokenSaleAddress}</p>\n        <p>UFCM token supply: {this.state.supply}</p>\n        <p>Token contract address for import: {this.state.tokenAddress}</p>\n        \n        <p>Address: {this.accounts[0]} have: {this.state.userTokens}</p>\n        <button type=\"button\" onClick={this.handleBuyToken}>Buy more tokens</button>\n      </div>\n        );\n  }\n\n}\n\nexport default MintableApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MintableApp from './MintableApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MintableApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}